"use strict";(self.webpackChunklesma_website=self.webpackChunklesma_website||[]).push([[2651],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},305:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],l={id:"literals",title:"Literals",sidebar_position:1},s="Literals",c={unversionedId:"common/literals",id:"common/literals",title:"Literals",description:"Literals are primitive values like booleans, numbers, etc.",source:"@site/docs/common/literals.md",sourceDirName:"common",slug:"/common/literals",permalink:"/docs/common/literals",draft:!1,editUrl:"https://github.com/alinalihassan/Lesma/tree/main/docs/docs/common/literals.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"literals",title:"Literals",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Programming a Guessing Game",permalink:"/docs/introduction/guessing-game"},next:{title:"Variables",permalink:"/docs/common/variables"}},u={},p=[{value:"Booleans",id:"booleans",level:2},{value:"Numeric",id:"numeric",level:2},{value:"String Literals",id:"string-literals",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"literals"},"Literals"),(0,i.kt)("p",null,"Literals are primitive values like booleans, numbers, etc."),(0,i.kt)("h2",{id:"booleans"},"Booleans"),(0,i.kt)("p",null,"Booleans, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," type, can only two values, ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let x: bool = true\n")),(0,i.kt)("h2",{id:"numeric"},"Numeric"),(0,i.kt)("p",null,"Numeric literals can be either integers, or floating points, using ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"float")," types respectively. Currently, Lesma assumes all numeric values to be signed. Both types are 64 bits."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let x: int = 5\nlet pi: float = 3.14\n")),(0,i.kt)("h2",{id:"string-literals"},"String Literals"),(0,i.kt)("p",null,"Strings, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," type, are enclosed in double-quotes ",(0,i.kt)("inlineCode",{parentName:"p"},'"'),". They can contain both ASCII and UTF-8 characters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'let hello: str = "Hello World!"\n')))}d.isMDXComponent=!0}}]);