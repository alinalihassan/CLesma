"use strict";(self.webpackChunklesma_website=self.webpackChunklesma_website||[]).push([[9962],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=l.createContext({}),u=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return l.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(o,".").concat(m)]||d[m]||p[m]||r;return n?l.createElement(g,i(i({ref:t},c),{},{components:n})):l.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5675:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var l=n(7462),a=(n(7294),n(3905));const r={id:"getting-started",title:"Getting Started",sidebar_position:2},i="Getting Started",s={unversionedId:"introduction/getting-started",id:"introduction/getting-started",title:"Getting Started",description:"There's currently no sharable binaries of the compiler, and you'll have to build it yourself.",source:"@site/docs/introduction/getting-started.md",sourceDirName:"introduction",slug:"/introduction/getting-started",permalink:"/docs/introduction/getting-started",draft:!1,editUrl:"https://github.com/alinalihassan/Lesma/tree/main/docs/docs/introduction/getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"getting-started",title:"Getting Started",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"What is Lesma",permalink:"/docs/introduction/what-is-lesma"},next:{title:"Hello World!",permalink:"/docs/introduction/hello-world"}},o={},u=[{value:"Using the installer",id:"using-the-installer",level:2},{value:"Building from source",id:"building-from-source",level:2},{value:"Installing Prerequisites",id:"installing-prerequisites",level:3},{value:"On Ubuntu",id:"on-ubuntu",level:4},{value:"On macOS",id:"on-macos",level:4},{value:"Build",id:"build",level:2},{value:"Using Lesma",id:"using-lesma",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"There's currently no sharable binaries of the compiler, and you'll have to build it yourself."),(0,a.kt)("h2",{id:"using-the-installer"},"Using the installer"),(0,a.kt)("p",null,"You can just run the installer, and it will get the binary with all the dependencies\nand standard library installed for you. Paste the following in your Terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'bash -c "$(curl -fsSL https://raw.githubusercontent.com/alinalihassan/Lesma/main/scripts/get-lesma.sh)"\n')),(0,a.kt)("h2",{id:"building-from-source"},"Building from source"),(0,a.kt)("p",null,"You can also choose to build from source, if you'd rather not, just skip this part."),(0,a.kt)("p",null,"To do that, uou'll need certain tools installed on your machine before attempting to build the project.\nMainly, you'll need a C++ compiler, CMake and LLVM 14 installed.\nSince the project is being developed and tested with Clang, I would suggest you use the same."),(0,a.kt)("h3",{id:"installing-prerequisites"},"Installing Prerequisites"),(0,a.kt)("h4",{id:"on-ubuntu"},"On Ubuntu"),(0,a.kt)("p",null,"Install system dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install zlib1g-dev\n")),(0,a.kt)("p",null,"Install CMake"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install cmake\n")),(0,a.kt)("p",null,"Install LLVM & Clang"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Run the script in the repository\n./setup-llvm.sh\n")),(0,a.kt)("p",null,"Set Clang symlink to Clang 14"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ln -s /usr/bin/clang-14 /usr/bin/clang\nsudo ln -s /usr/bin/clang++-14 /usr/bin/clang++\n")),(0,a.kt)("h4",{id:"on-macos"},"On macOS"),(0,a.kt)("p",null,"MacOS already has Apple Clang installed which should be good enough as a C++ compiler."),(0,a.kt)("p",null,"Install system dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"xcode-select --install\n")),(0,a.kt)("p",null,"Install CMake"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brew install cmake\n")),(0,a.kt)("p",null,"Install LLVM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brew install llvm@14\n\necho 'export PATH=\"/opt/homebrew/opt/llvm/bin:$PATH\"' >> ~/.zshrc\necho 'export LDFLAGS=\"-L/opt/homebrew/opt/llvm/lib -Wl,-rpath,/opt/homebrew/opt/llvm/lib\"' >> ~/.zshrc\necho 'export CPPFLAGS=\"-I/opt/homebrew/opt/llvm/include\"' >> ~/.zshrc\n")),(0,a.kt)("h2",{id:"build"},"Build"),(0,a.kt)("p",null,"You can now build the compiler yourself! Let's try it out."),(0,a.kt)("p",null,"Clone the repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/alinalihassan/Lesma\n")),(0,a.kt)("p",null,"Create a build directory for the generated output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir build\n")),(0,a.kt)("p",null,"Build the project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cmake -B build\ncmake --build build\n")),(0,a.kt)("h2",{id:"using-lesma"},"Using Lesma"),(0,a.kt)("p",null,"You should now see a few more files in the build directory, ",(0,a.kt)("strong",{parentName:"p"},"lesma")," among them. We can use it to run our Lesma sources."),(0,a.kt)("p",null,"Check how to use the CLI and available options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./build/lesma --help\n")),(0,a.kt)("p",null,"Run one of the Lesma test files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./build/lesma run tests/lesma/inference.les\n")),(0,a.kt)("p",null,"Compile a Lesma file to binary/executable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./build/lesma compile tests/lesma/inference.les\n")))}p.isMDXComponent=!0}}]);