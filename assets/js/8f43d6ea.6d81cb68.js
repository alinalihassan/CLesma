"use strict";(self.webpackChunklesma_website=self.webpackChunklesma_website||[]).push([[2840],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(r),b=a,d=u["".concat(s,".").concat(b)]||u[b]||p[b]||i;return r?n.createElement(d,o(o({ref:t},m),{},{components:r})):n.createElement(d,o({ref:t},m))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5280:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={id:"variables",title:"Variables",sidebar_position:2},o="Variables",l={unversionedId:"common/variables",id:"common/variables",title:"Variables",description:"Like most imperative programming languages, Lesma has variables.",source:"@site/docs/common/variables.md",sourceDirName:"common",slug:"/common/variables",permalink:"/docs/common/variables",draft:!1,editUrl:"https://github.com/alinalihassan/Lesma/tree/main/docs/docs/common/variables.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"variables",title:"Variables",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Literals",permalink:"/docs/common/literals"},next:{title:"Types",permalink:"/docs/common/types"}},s={},c=[{value:"Assignment",id:"assignment",level:2},{value:"Mutability (Var vs Let)",id:"mutability-var-vs-let",level:2}],m={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"variables"},"Variables"),(0,a.kt)("p",null,"Like most imperative programming languages, Lesma has variables."),(0,a.kt)("h2",{id:"assignment"},"Assignment"),(0,a.kt)("p",null,"Variables can be assigned using '=' operator."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If a type is not specified, it's inferred. In the example below, x will get assigned as an integer.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let x = 5\n")),(0,a.kt)("h2",{id:"mutability-var-vs-let"},"Mutability (Var vs Let)"),(0,a.kt)("p",null,"Variables can be either mutable, which means that they can change their value over time, or immutable, having the same value after assignment."),(0,a.kt)("p",null,"You need to specify the mutability when you declare a variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Mutable \nvar x = 5\n\n# Immutable\nlet y = 7\n\nx = 42 # Works just fine\ny = 42 # Raises an error\n")))}p.isMDXComponent=!0}}]);