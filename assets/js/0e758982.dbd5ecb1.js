"use strict";(self.webpackChunklesma_website=self.webpackChunklesma_website||[]).push([[1420],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(y,s(s({ref:t},u),{},{components:n})):r.createElement(y,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"types",title:"Types",sidebar_position:3},s="Types",o={unversionedId:"basics/types",id:"basics/types",title:"Types",description:"Every value in Lesma has a type, which tells the compiler what sort of data it is.",source:"@site/docs/basics/types.md",sourceDirName:"basics",slug:"/basics/types",permalink:"/docs/basics/types",draft:!1,editUrl:"https://github.com/alinalihassan/Lesma/tree/main/docs/docs/basics/types.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"types",title:"Types",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Variables",permalink:"/docs/basics/variables"},next:{title:"Functions",permalink:"/docs/basics/functions"}},l={},p=[{value:"Primitives",id:"primitives",level:2},{value:"Booleans",id:"booleans",level:3},{value:"Numeric",id:"numeric",level:3},{value:"String Literals",id:"string-literals",level:3},{value:"Compounds",id:"compounds",level:2},{value:"Enums",id:"enums",level:3},{value:"Classes",id:"classes",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"types"},"Types"),(0,a.kt)("p",null,"Every value in Lesma has a type, which tells the compiler what sort of data it is.\nIt helps Lesma to figure out what it can expect out of it, and it helps you to know what you can do with it."),(0,a.kt)("p",null,"There are two types of data, ",(0,a.kt)("em",{parentName:"p"},"primitives")," and ",(0,a.kt)("em",{parentName:"p"},"compound"),"."),(0,a.kt)("h2",{id:"primitives"},"Primitives"),(0,a.kt)("p",null,"Primitive types are just values, such as integers, strings and booleans.\nThey don't have any methods or fields or anything like that, but they have built-in operators\nfor things like comparisons."),(0,a.kt)("h3",{id:"booleans"},"Booleans"),(0,a.kt)("p",null,"Booleans, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," type, can only two values, ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let x: bool = true\n")),(0,a.kt)("h3",{id:"numeric"},"Numeric"),(0,a.kt)("p",null,"Numeric literals can be either integers, or floating points, using ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"float")," types respectively. Currently, Lesma assumes all numeric values to be signed. Both types are 64 bits."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let x: int = 5\nlet pi: float = 3.14\n")),(0,a.kt)("h3",{id:"string-literals"},"String Literals"),(0,a.kt)("p",null,"Strings, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"str")," type, are enclosed in double-quotes ",(0,a.kt)("inlineCode",{parentName:"p"},'"'),". They can contain both ASCII and UTF-8 characters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'let hello: str = "Hello World!"\n')),(0,a.kt)("h2",{id:"compounds"},"Compounds"),(0,a.kt)("p",null,"Compound types are constructs that store more data or details than just one value."),(0,a.kt)("h3",{id:"enums"},"Enums"),(0,a.kt)("p",null,"Enumerations, also referred as ",(0,a.kt)("em",{parentName:"p"},"enums"),", allow you to define a type with a limited amount of options."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Unlike the other compound types, ",(0,a.kt)("em",{parentName:"p"},"enums")," have built-in equality and inequality operators.\nYou can use ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"!="),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'enum Color\n  RED\n  GREEN\n  BLUE\n\nx = Color.RED\n\nif x == Color.RED\n  print("It\'s Red!")\n')),(0,a.kt)("h3",{id:"classes"},"Classes"),(0,a.kt)("p",null,"Classes contain constructors, fields and methods. They offer more powerful features when it comes to representing objects."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Animal\n  var x: int\n\n  def new(x: int)\n    self.x = x\n\n  def getX() -> int\n    return self.x\n\nvar z = Animal(101)\nprint(z.getX()) # Prints 101\n")))}c.isMDXComponent=!0}}]);