name: Build

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  BUILD_TYPE: Release
  CC: clang
  CXX: clang++

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Clang Format
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: DoozyX/clang-format-lint-action@v0.15
        with:
          source: './src/'
          extensions: 'h,cpp'
          clangFormatVersion: 14
          inplace: True

      - name: Commit formatting diff
        uses: EndBug/add-and-commit@v9
        with:
          author_name: GitHub
          author_email: github_action@lesma.com
          message: 'Committing clang-format changes'

      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            C:/Program Files/LLVM
            ./llvm
          key: llvm-15.0-${{ matrix.os }}

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "15.0"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Get vcpkg commit hash
        id: vcpkg_hash
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'vcpkg.json'
          prop_path: 'builtin-baseline'

      - name: Install CMake & Ninja
        uses: lukka/get-cmake@v3.26.0

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgGitCommitId: '${{ steps.vcpkg_hash.outputs.prop }}'

      - name: Run CMake with Ninja
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'Release_Dist'
          buildPreset: 'Release_Dist'

      - name: Test
        working-directory: ${{github.workspace}}/build/Release
        run: ctest -C ${{env.BUILD_TYPE}} --rerun-failed --output-on-failure

      - name: Package Artifact
        working-directory: ${{github.workspace}}/build/Release
        run: ninja package

      - uses: actions/upload-artifact@v3
        with:
          name: lesma
          path: ${{github.workspace}}/build/Release/Lesma*.tar.gz

  release:
    name: Release
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.JS
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Semantic Release Dependencies
        run: |
          npm install -g @semantic-release/changelog @semantic-release/git

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: lesma

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update vcpkg.json version
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version=${{ steps.semantic.outputs.new_release_version }} vspkg.json > vspkg.json'

      - name: Commit and push changes
        run: |
          git config user.name "GitHub"
          git config user.email "github_action@lesma.com"
          git add vcpkg.json
          git commit -m "Update version in vcpkg.json to ${{ steps.semantic.outputs.new_release_version }}"
          git push